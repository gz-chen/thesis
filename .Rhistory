#   return(list(lambda = lambs, beta = beta, fit = fit, sig2 = sig2, bic_n = bic_n,
#               U = U, df = df, h = h, bls = bls, bic = bic, stop.index = stop.index))
# }
h[1:60]
rm(list = ls())
load('tired.Rdata')
y <- y_cen; X <- X_cen1; D <- D1; rtol = 1e-7; btol = 1e-7; maxsteps = 2000; k.stop = 100
# gen_select2 <- function(y, X, D, rtol = 1e-7, btol = 1e-7, maxsteps = 2000, k.stop = 300){
svd_D <- function(A, b, rtol = 1e-7){
# A function to calculate inv(t(D2[B_c,]))
# A = t(D2[B_c,])
# inv(A) %*% b
# nullity(D2[B_c,]) = n - rank(t(D2[B_c,]))
svd.A <- svd(A)
d <- svd.A$d
r <- sum(d>rtol)
d <- d[1:r]
u <- svd.A$u[,1:r]; v <- svd.A$v[,1:r] # D_k <- u %*% d %*% t(v) is the condensed SVD
x <- v %*% (1/d * (t(u) %*% b))
# inv <- v %*% (t(u)/d)
Proj.D_k <- u %*% t(u)
return(list(x = x, Prj = Proj.D_k, r = r))
}
# svd_D <- function(A, b, rtol = 1e-7){
#   s = svd(A)
#   di = s$d
#   ii = di>rtol
#   di[ii] = 1/di[ii]
#   di[!ii] = 0
#   return(list(x=s$v %*% (di* (t(s$u) %*% b)),r=sum(ii)))
# }
# some basic parameters
n <- length(y)
m <- nrow(D)
p <- ncol(D)
# do some transformations
# reformulate the problem with general X as a signal approx. problem
x <- svd(X)
if (min(x$d) < rtol) stop('X does not have full col. rank!')
y2 <- as.numeric(x$u %*% (t(x$u) %*% y))
X_inv <- x$v %*% (t(x$u)/x$d)
D2 <- D %*% X_inv
bls <- y2
sig2 <- sum((y - y2)^2)/(n-p)
# Intialize things to keep track of & return with
U <- matrix(nrow = m, ncol = maxsteps) # optimal dual variables at each step
lambs <- numeric(maxsteps) # knot values at each step
B <- NULL # boundary set
B_c <- seq(1:m) # interior set
S <- NULL # signs of coordinates in B
bic <- numeric(maxsteps) # adjusted bic at each step
# bic_c2 <- numeric(maxsteps)
bic_n <- numeric(maxsteps)
df <- numeric(maxsteps) # df of the fit, i.e. nullity(D2[B_c,])
h <- logical(maxsteps) # whether hit or not
###########Begin!###########
##First step
temp <- svd_D(t(D2), y2)
U[,1] <- temp$x
i_hit <- which.max(abs(U[,1]))
r_hit <- sign(U[i_hit,1])
lambs[1] <- abs(U[i_hit,1])
h[1] <- T
df[1] <- n - temp$r
# bic[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
# bic_c2[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
bic_n[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
B <- c(B,B_c[i_hit]) # must hit
# change <- list(new = D2[B_c[i_hit],], Prj = temp$Prj)
B_c <- B_c[-i_hit]
S <- c(S,r_hit)
Ds <- D2[i_hit,] * S # vector t(D[B,]) %*% S
D_1 <- D2[-i_hit,,drop = F] # matrix D[B_c,]
D_2 <- D2[i_hit,,drop = F] # matrix D[B,]
YELLOW <- F
flag <- 1
k <- 2
while(k <= maxsteps & lambs[k-1] > 0){
temp <- svd_D(t(D_1), cbind(y2,Ds), rtol = 1e-7)
df[k] <- n - temp$r
# decide when to quit loop based on BIC
# if (df[k] == df[k-1]) {
# bic[k] <- bic[k-1]
# } else {
# bic[k] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[k], 3)
# if (bic[k] > bic[k-1]) {
#   # bic is increasing
#   if (YELLOW == T) {
#     stop.index <- flag
#     # break
#   } else YELLOW <- T
# } else {
#   # bic is decreasing
#   YELLOW <- F
#   flag <- k
# }
# }
# hitting times
a = as.numeric(temp$x[,1])
b = as.numeric(temp$x[,2])
R <- sign(a)
hits <- a/(R+b)
hits[hits > lambs[k-1] + btol] <- 0
hits[hits > lambs[k-1]] <- lambs[k-1]
i_hit <- which.max(hits)
hit <- hits[i_hit]
r_hit <- R[i_hit]
# leaving times
c <- S * (D_2 %*% (y2 - t(D_1) %*% a))
d <- S * (D_2 %*% (Ds - t(D_1) %*% b))
leaves <- c/d
leaves[c > 0] <- 0
leaves[leaves > lambs[k-1] + btol] <- 0
leaves[leaves > lambs[k-1]] <- lambs[k-1]
i_leave <- which.max(leaves)
leave <- leaves[i_leave]
# compare between hit and leave
if (hit > leave) {
lambs[k] <- hit
# bic_c2[k] <- round(sum((temp$Prj %*% y2 + hit * (diag(n) - temp$Prj) %*% Ds)^2) + log(n) * sig2 * df[k], 3)
h[k] <- T
uhat <- numeric(m)
uhat[B] <- hit*S
uhat[B_c] <- a - hit*b
U[,k] <- uhat
bic_n[k] <- round(sum((t(D2) %*% uhat)^2) + log(n) * sig2 * df[k],3)
B <- c(B,B_c[i_hit])
B_c <- B_c[-i_hit]
Ds <- Ds + D_1[i_hit,] * r_hit
S <- c(S, r_hit)
D_2 <- rbind(D_2,D_1[i_hit,])
D_1 <- D_1[-i_hit,,drop = F]
} else {
lambs[k] <- leave
# bic_c2[k] <- round(sum((temp$Prj %*% y2 + leave * (diag(n) - temp$Prj) %*% Ds)^2) + log(n) * sig2 * df[k], 3)
h[k] <- F
uhat <- numeric(m)
uhat[B] <- leave*S
uhat[B_c] <- a - leave*b
U[,k] <- uhat
bic_n[k] <- round(sum((t(D2) %*% uhat)^2) + log(n) * sig2 * df[k],3)
B_c <- c(B_c, B[i_leave])
B <- B[-i_leave]
Ds <- Ds - D_2[i_leave,] * S[i_leave]
S <- S[-i_leave]
D_1 <- rbind(D_1,D_2[i_leave,])
D_2 <- D_2[-i_leave,,drop = F]
}
# decide whether to stop
if (bic_n[k] > bic_n[k-1]) {
# bic is increasing
if (YELLOW == T) {
# stop.index <- flag
# break
} else YELLOW <- T
} else if (bic_n[k] < bic_n[k-1]){
# bic is decreasing
YELLOW <- F
flag <- k
}
k <- k + 1
if (k>k.stop) break
if (!k%%30) print(k)
}
#   #trim
#   lambs <- lambs[1:(k-1)]
#   U <- U[,1:(k-1), drop = F]
#   df <- df[1:(k-1)]
#   h <- h[1:(k-1)]
#   # bic <- bic[1:(k-1)]
#   # bic_c2 <- bic_c2[1:(k-1)]
#   bic_n <- bic_n[1:(k-1)]
#   stop.index <- which.min(bic_n)
#
#   fit <- y2 - t(D2) %*% U
#   beta <- X_inv %*% fit
#
#   # bic_c <- colSums((c(y2) - fit)^2) + log(n) * sig2 * df
#
#   return(list(lambda = lambs, beta = beta, fit = fit, sig2 = sig2, bic_n = bic_n,
#               U = U, df = df, h = h, bls = bls, bic = bic, stop.index = stop.index))
# }
h[1:60]
lambs[1:100]
rm(list = ls())
load("tired.Rdata")
# gen_select2 <- function(y, X, D, rtol = 1e-7, btol = 1e-7, maxsteps = 2000, k.stop = 100){
y = y_cen; X = X_cen1
D = D1; rtol = 1e-7; btol = 1e-7; maxsteps = 2000; k.stop = 100;
svd_D <- function(A, b, rtol = 1e-7){
s = svd(A)
di = s$d
ii = di>rtol
di[ii] = 1/di[ii]
di[!ii] = 0
return(list(x=s$v %*% (di* (t(s$u) %*% b)),r=sum(ii)))
}
# svdsolve <- function(A,b,rtol) {
#   s = svd(A)
#   di = s$d
#   ii = di>rtol
#   di[ii] = 1/di[ii]
#   di[!ii] = 0
#   return(list(x=s$v %*% (di* (t(s$u) %*% b)),q=sum(ii)))
# }
# some basic parameters
n <- length(y)
m <- nrow(D)
p <- ncol(D)
# do some transformations
# reformulate the problem with general X as a signal approx. problem
x <- svd(X)
if (min(x$d) < rtol) stop('X does not have full col. rank!')
y2 <- as.numeric(x$u %*% (t(x$u) %*% y))
X_inv <- x$v %*% (t(x$u)/x$d)
D2 <- D %*% X_inv
bls <- y2
sig2 <- sum((y - y2)^2)/(n-p)
# Intialize things to keep track of & return with
U <- matrix(nrow = m, ncol = maxsteps) # optimal dual variables at each step
lambs <- numeric(maxsteps) # knot values at each step
B <- NULL # boundary set
B_c <- seq(1:m) # interior set
S <- NULL # signs of coordinates in B
bic <- numeric(maxsteps) # adjusted bic at each step
# bic_c2 <- numeric(maxsteps)
bic_n <- numeric(maxsteps)
df <- numeric(maxsteps) # df of the fit, i.e. nullity(D2[B_c,])
h <- logical(maxsteps) # whether hit or not
###########Begin!###########
##First step
temp <- svd_D(t(D2), y2)
U[,1] <- temp$x
i_hit <- which.max(abs(U[,1]))
r_hit <- sign(U[i_hit,1])
lambs[1] <- abs(U[i_hit,1])
h[1] <- T
df[1] <- n - temp$r
# bic[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
# bic_c2[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
# bic_n[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
B <- c(B,B_c[i_hit]) # must hit
# change <- list(new = D2[B_c[i_hit],], Prj = temp$Prj)
B_c <- B_c[-i_hit]
S <- c(S,r_hit)
Ds <- D2[i_hit,] * S # vector t(D[B,]) %*% S
D_1 <- D2[-i_hit,,drop = F] # matrix D[B_c,]
D_2 <- D2[i_hit,,drop = F] # matrix D[B,]
YELLOW <- F
flag <- 1
k <- 2
while(k <= maxsteps & lambs[k-1] > 0){
temp <- svd_D(t(D_1), cbind(y2,Ds), rtol = 1e-7)
df[k] <- n - temp$r
# hitting times
a = as.numeric(temp$x[,1])
b = as.numeric(temp$x[,2])
R <- sign(a)
hits <- a/(R+b)
hits[hits > lambs[k-1] + btol] <- 0
hits[hits > lambs[k-1]] <- lambs[k-1]
i_hit <- which.max(hits)
hit <- hits[i_hit]
r_hit <- R[i_hit]
# leaving times
c <- S * (D_2 %*% (y2 - t(D_1) %*% a))
d <- S * (D_2 %*% (Ds - t(D_1) %*% b))
leaves <- c/d
leaves[c >= 0] <- 0
leaves[leaves > lambs[k-1] + btol] <- 0
leaves[leaves > lambs[k-1]] <- lambs[k-1]
i_leave <- which.max(leaves)
leave <- leaves[i_leave]
# compare between hit and leave
if (hit > leave) {
lambs[k] <- hit
# bic_c2[k] <- round(sum((temp$Prj %*% y2 + hit * (diag(n) - temp$Prj) %*% Ds)^2) + log(n) * sig2 * df[k], 3)
h[k] <- T
uhat <- numeric(m)
uhat[B] <- hit*S
uhat[B_c] <- a - hit*b
U[,k] <- uhat
# bic_n[k] <- round(sum((t(D2) %*% uhat)^2) + log(n) * sig2 * df[k],3)
B <- c(B,B_c[i_hit])
B_c <- B_c[-i_hit]
Ds <- Ds + D_1[i_hit,] * r_hit
S <- c(S, r_hit)
D_2 <- rbind(D_2,D_1[i_hit,])
D_1 <- D_1[-i_hit,,drop = F]
} else {
lambs[k] <- leave
h[k] <- F
uhat <- numeric(m)
uhat[B] <- leave*S
uhat[B_c] <- a - leave*b
U[,k] <- uhat
# bic_n[k] <- round(sum((t(D2) %*% uhat)^2) + log(n) * sig2 * df[k],3)
B_c <- c(B_c, B[i_leave])
B <- B[-i_leave]
Ds <- Ds - D_2[i_leave,] * S[i_leave]
S <- S[-i_leave]
D_1 <- rbind(D_1,D_2[i_leave,])
D_2 <- D_2[-i_leave,,drop = F]
}
# decide whether to stop
if (bic_n[k] > bic_n[k-1]) {
# bic is increasing
if (YELLOW == T) {
# stop.index <- flag
# break
} else YELLOW <- T
} else if (bic_n[k] < bic_n[k-1]){
# bic is decreasing
YELLOW <- F
flag <- k
}
if (k>=k.stop) break
# if (k == 22) stop()
k <- k + 1
if (!k%%30) print(k)
}
#trim
# lambs <- lambs[1:(k-1)]
# U <- U[,1:(k-1), drop = F]
# df <- df[1:(k-1)]
# h <- h[1:(k-1)]
# bic_n <- bic_n[1:(k-1)]
# stop.index <- which.min(bic_n)
#
# fit <- y2 - t(D2) %*% U
# beta <- X_inv %*% fit
# bic_c <- colSums((c(y2) - fit)^2) + log(n) * sig2 * df
#
#   return(list(lambda = lambs, beta = beta, fit = fit, sig2 = sig2, bic_n = bic_n,
#               U = U, df = df, h = h, bls = bls, bic = bic, stop.index = stop.index))
# }
lambs[1:100]
res <- genlasso(y_cen,X_cen1,D1, maxsteps = 100, svd = T)
res$lambda[1:100]
res1 <- gen_select2(y_cen, X_cen1, D1, k.stop = 100)
res1$lambda[1:100]
gen_select2 <- function(y, X, D, rtol = 1e-7, btol = 1e-7, maxsteps = 2000, k.stop = 300){
svd_D <- function(A, b, rtol = 1e-7){
# A function to calculate inv(t(D2[B_c,]))
# A = t(D2[B_c,])
# inv(A) %*% b
# nullity(D2[B_c,]) = n - rank(t(D2[B_c,]))
svd.A <- svd(A)
d <- svd.A$d
r <- sum(d>rtol)
d <- d[1:r]
u <- svd.A$u[,1:r]; v <- svd.A$v[,1:r] # D_k <- u %*% d %*% t(v) is the condensed SVD
x <- v %*% (1/d * (t(u) %*% b))
# inv <- v %*% (t(u)/d)
Proj.D_k <- u %*% t(u)
return(list(x = x, Prj = Proj.D_k, r = r))
}
# some basic parameters
n <- length(y)
m <- nrow(D)
p <- ncol(D)
# do some transformations
# reformulate the problem with general X as a signal approx. problem
x <- svd(X)
if (min(x$d) < rtol) stop('X does not have full col. rank!')
y2 <- as.numeric(x$u %*% (t(x$u) %*% y))
X_inv <- x$v %*% (t(x$u)/x$d)
D2 <- D %*% X_inv
bls <- y2
sig2 <- sum((y - y2)^2)/(n-p)
# Intialize things to keep track of & return with
U <- matrix(nrow = m, ncol = maxsteps) # optimal dual variables at each step
lambs <- numeric(maxsteps) # knot values at each step
B <- NULL # boundary set
B_c <- seq(1:m) # interior set
S <- NULL # signs of coordinates in B
bic <- numeric(maxsteps) # adjusted bic at each step
# bic_c2 <- numeric(maxsteps)
bic_n <- numeric(maxsteps)
df <- numeric(maxsteps) # df of the fit, i.e. nullity(D2[B_c,])
h <- logical(maxsteps) # whether hit or not
###########Begin!###########
##First step
temp <- svd_D(t(D2), y2)
U[,1] <- temp$x
i_hit <- which.max(abs(U[,1]))
r_hit <- sign(U[i_hit,1])
lambs[1] <- abs(U[i_hit,1])
h[1] <- T
df[1] <- n - temp$r
# bic[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
# bic_c2[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
bic_n[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
B <- c(B,B_c[i_hit]) # must hit
# change <- list(new = D2[B_c[i_hit],], Prj = temp$Prj)
B_c <- B_c[-i_hit]
S <- c(S,r_hit)
Ds <- D2[i_hit,] * S # vector t(D[B,]) %*% S
D_1 <- D2[-i_hit,,drop = F] # matrix D[B_c,]
D_2 <- D2[i_hit,,drop = F] # matrix D[B,]
YELLOW <- F
flag <- 1
k <- 2
while(k <= maxsteps & lambs[k-1] > 0){
temp <- svd_D(t(D_1), cbind(y2,Ds), rtol = 1e-7)
df[k] <- n - temp$r
# decide when to quit loop based on BIC
# if (df[k] == df[k-1]) {
# bic[k] <- bic[k-1]
# } else {
# bic[k] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[k], 3)
# if (bic[k] > bic[k-1]) {
#   # bic is increasing
#   if (YELLOW == T) {
#     stop.index <- flag
#     # break
#   } else YELLOW <- T
# } else {
#   # bic is decreasing
#   YELLOW <- F
#   flag <- k
# }
# }
# hitting times
a = as.numeric(temp$x[,1])
b = as.numeric(temp$x[,2])
R <- sign(a)
hits <- a/(R+b)
hits[hits > lambs[k-1] + btol] <- 0
hits[hits > lambs[k-1]] <- lambs[k-1]
i_hit <- which.max(hits)
hit <- hits[i_hit]
r_hit <- R[i_hit]
# leaving times
c <- S * (D_2 %*% (y2 - t(D_1) %*% a))
d <- S * (D_2 %*% (Ds - t(D_1) %*% b))
leaves <- c/d
leaves[c > 0] <- 0
leaves[leaves > lambs[k-1] + btol] <- 0
leaves[leaves > lambs[k-1]] <- lambs[k-1]
i_leave <- which.max(leaves)
leave <- leaves[i_leave]
# compare between hit and leave
if (hit > leave) {
lambs[k] <- hit
# bic_c2[k] <- round(sum((temp$Prj %*% y2 + hit * (diag(n) - temp$Prj) %*% Ds)^2) + log(n) * sig2 * df[k], 3)
h[k] <- T
uhat <- numeric(m)
uhat[B] <- hit*S
uhat[B_c] <- a - hit*b
U[,k] <- uhat
bic_n[k] <- round(sum((t(D2) %*% uhat)^2) + log(n) * sig2 * df[k],3)
B <- c(B,B_c[i_hit])
B_c <- B_c[-i_hit]
Ds <- Ds + D_1[i_hit,] * r_hit
S <- c(S, r_hit)
D_2 <- rbind(D_2,D_1[i_hit,])
D_1 <- D_1[-i_hit,,drop = F]
} else {
lambs[k] <- leave
# bic_c2[k] <- round(sum((temp$Prj %*% y2 + leave * (diag(n) - temp$Prj) %*% Ds)^2) + log(n) * sig2 * df[k], 3)
h[k] <- F
uhat <- numeric(m)
uhat[B] <- leave*S
uhat[B_c] <- a - leave*b
U[,k] <- uhat
bic_n[k] <- round(sum((t(D2) %*% uhat)^2) + log(n) * sig2 * df[k],3)
B_c <- c(B_c, B[i_leave])
B <- B[-i_leave]
Ds <- Ds - D_2[i_leave,] * S[i_leave]
S <- S[-i_leave]
D_1 <- rbind(D_1,D_2[i_leave,])
D_2 <- D_2[-i_leave,,drop = F]
}
# decide whether to stop
if (bic_n[k] > bic_n[k-1]) {
# bic is increasing
if (YELLOW == T) {
# stop.index <- flag
# break
} else YELLOW <- T
} else if (bic_n[k] < bic_n[k-1]){
# bic is decreasing
YELLOW <- F
flag <- k
}
k <- k + 1
if (k>k.stop) break
if (!k%%30) print(k)
}
#trim
lambs <- lambs[1:(k-1)]
U <- U[,1:(k-1), drop = F]
df <- df[1:(k-1)]
h <- h[1:(k-1)]
# bic <- bic[1:(k-1)]
# bic_c2 <- bic_c2[1:(k-1)]
bic_n <- bic_n[1:(k-1)]
stop.index <- which.min(bic_n)
fit <- y2 - t(D2) %*% U
beta <- X_inv %*% fit
# bic_c <- colSums((c(y2) - fit)^2) + log(n) * sig2 * df
return(list(lambda = lambs, beta = beta, fit = fit, sig2 = sig2, bic_n = bic_n,
U = U, df = df, h = h, bls = bls, bic = bic, stop.index = stop.index))
}
res2 <- gen_select2(y_cen, X_cen1, D1, k.stop = 100)
res2$lambda[1:100]
setwd('/Users/gzchen/Documents/GitHub/thesis')
source('MyFuns.R')
setwd('/Users/gzchen/Documents/GitHub/thesis')
source('MyFuns.R')
.libPaths()
