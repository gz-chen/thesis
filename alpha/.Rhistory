Proj.D_k <- u %*% t(u)
return(list(x = x, Prj = Proj.D_k, r = r))
}
# some basic parameters
n <- length(y)
m <- nrow(D)
p <- ncol(D)
# do some transformations
# reformulate the problem with general X as a signal approx. problem
x <- svd(X)
if (min(x$d) < rtol) stop('X does not have full col. rank!')
y2 <- as.numeric(x$u %*% (t(x$u) %*% y))
X_inv <- x$v %*% (t(x$u)/x$d)
D2 <- D %*% X_inv
bls <- y2
sig2 <- sum((y - y2)^2)/(n-p)
# Intialize things to keep track of & return with
U <- matrix(nrow = m, ncol = maxsteps) # optimal dual variables at each step
lambs <- numeric(maxsteps) # knot values at each step
B <- NULL # boundary set
B_c <- seq(1:m) # interior set
S <- NULL # signs of coordinates in B
bic <- numeric(maxsteps) # adjusted bic at each step
# bic_c2 <- numeric(maxsteps)
bic_n <- numeric(maxsteps)
df <- numeric(maxsteps) # df of the fit, i.e. nullity(D2[B_c,])
h <- logical(maxsteps) # whether hit or not
###########Begin!###########
##First step
temp <- svd_D(t(D2), y2)
U[,1] <- temp$x
i_hit <- which.max(abs(U[,1]))
r_hit <- sign(U[i_hit,1])
lambs[1] <- abs(U[i_hit,1])
h[1] <- T
df[1] <- n - temp$r
# bic[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
# bic_c2[1] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[1], 3)
bic_n[1] <- round(sum((temp$Prj %*% y2)^2) + 2 * sig2 * df[1], 3)
B <- c(B,B_c[i_hit]) # must hit
# change <- list(new = D2[B_c[i_hit],], Prj = temp$Prj)
B_c <- B_c[-i_hit]
S <- c(S,r_hit)
Ds <- D2[i_hit,] * S # vector t(D[B,]) %*% S
D_1 <- D2[-i_hit,,drop = F] # matrix D[B_c,]
D_2 <- D2[i_hit,,drop = F] # matrix D[B,]
YELLOW <- F
flag <- 1
k <- 2
while(k <= maxsteps & lambs[k-1] > 0){
temp <- svd_D(t(D_1), cbind(y2,Ds), rtol = 1e-7)
df[k] <- n - temp$r
# decide when to quit loop based on BIC
# if (df[k] == df[k-1]) {
# bic[k] <- bic[k-1]
# } else {
# bic[k] <- round(sum((temp$Prj %*% y2)^2) + log(n) * sig2 * df[k], 3)
# if (bic[k] > bic[k-1]) {
#   # bic is increasing
#   if (YELLOW == T) {
#     stop.index <- flag
#     # break
#   } else YELLOW <- T
# } else {
#   # bic is decreasing
#   YELLOW <- F
#   flag <- k
# }
# }
# hitting times
a = as.numeric(temp$x[,1])
b = as.numeric(temp$x[,2])
R <- sign(a)
hits <- a/(R+b)
hits[hits > lambs[k-1] + btol] <- 0
hits[hits > lambs[k-1]] <- lambs[k-1]
i_hit <- which.max(hits)
hit <- hits[i_hit]
r_hit <- R[i_hit]
# leaving times
c <- S * (D_2 %*% (y2 - t(D_1) %*% a))
d <- S * (D_2 %*% (Ds - t(D_1) %*% b))
leaves <- c/d
leaves[c > -btol] <- 0
leaves[leaves > lambs[k-1] + btol] <- 0
leaves[leaves > lambs[k-1]] <- lambs[k-1]
i_leave <- which.max(leaves)
leave <- leaves[i_leave]
# compare between hit and leave
if (hit > leave) {
lambs[k] <- hit
# bic_c2[k] <- round(sum((temp$Prj %*% y2 + hit * (diag(n) - temp$Prj) %*% Ds)^2) + log(n) * sig2 * df[k], 3)
h[k] <- T
uhat <- numeric(m)
uhat[B] <- hit*S
uhat[B_c] <- a - hit*b
U[,k] <- uhat
bic_n[k] <- round(sum((t(D2) %*% uhat)^2) + 2 * sig2 * df[k],3)
B <- c(B,B_c[i_hit])
B_c <- B_c[-i_hit]
Ds <- Ds + D_1[i_hit,] * r_hit
S <- c(S, r_hit)
D_2 <- rbind(D_2,D_1[i_hit,])
D_1 <- D_1[-i_hit,,drop = F]
} else {
lambs[k] <- leave
# bic_c2[k] <- round(sum((temp$Prj %*% y2 + leave * (diag(n) - temp$Prj) %*% Ds)^2) + log(n) * sig2 * df[k], 3)
h[k] <- F
uhat <- numeric(m)
uhat[B] <- leave*S
uhat[B_c] <- a - leave*b
U[,k] <- uhat
bic_n[k] <- round(sum((t(D2) %*% uhat)^2) + 2 * sig2 * df[k],3)
B_c <- c(B_c, B[i_leave])
B <- B[-i_leave]
Ds <- Ds - D_2[i_leave,] * S[i_leave]
S <- S[-i_leave]
D_1 <- rbind(D_1,D_2[i_leave,])
D_2 <- D_2[-i_leave,,drop = F]
}
# decide whether to stop
if (bic_n[k] > bic_n[k-1]) {
# bic is increasing
if (YELLOW == T) {
# stop.index <- flag
break
} else YELLOW <- T
} else if (bic_n[k] < bic_n[k-1]){
# bic is decreasing
YELLOW <- F
flag <- k
}
k <- k + 1
if (k>k.stop) break
if (!k%%30) print(k)
}
#trim
lambs <- lambs[1:(k-1)]
U <- U[,1:(k-1), drop = F]
df <- df[1:(k-1)]
h <- h[1:(k-1)]
# bic <- bic[1:(k-1)]
# bic_c2 <- bic_c2[1:(k-1)]
bic_n <- bic_n[1:(k-1)]
stop.index <- which.min(bic_n)
fit <- y2 - t(D2) %*% U
beta <- X_inv %*% fit
# bic_c <- colSums((c(y2) - fit)^2) + log(n) * sig2 * df
return(list(lambda = lambs, beta = beta, fit = fit, sig2 = sig2, bic_n = bic_n,
U = U, df = df, h = h, bls = bls, bic = bic, stop.index = stop.index))
}
setwd('/Users/gzchen/Documents/GitHub/thesis/alpha')
source('../MyFuns.R')
set.seed(1012)
p <- 50
phy <- rtree(p)
phy$tip.label <- 1:p
CLS <- c(56,75)
asso_tips <- plot_tree(phy, cls = CLS)
ln_par <- ln_param(phy)
gma <- gen_gma(ln_par = ln_par, p1 = 0.02, p2 = 0.05, tree = phy, cls = CLS)
beta_true <- true_beta(phy, CLS, gma)
ref <- 1
alp.values <- seq(0, 1, by = 0.05)
NN <- 5
STOR <- list()
pp <- length(alp.values)
mtd <- c('myown','wang1')
for (i in 1:NN){
temp <- matrix(nrow = 5, ncol = pp)
Data <- gen_dat(n = 300, ln_par = ln_par, gma = gma, tree = phy, cls = CLS, sig = 1)
STOR[[i]] <- list()
for (j in 1:2){
DW <- gen_D(phy, m = 2, weight = 'max', type = mtd[j])
for (ii in 1:pp) {
model.data <- data_prep(Data, DW, ref, alp = alp.values[ii], normlz = F)
G_cen <- model.data$G_cen
y_cen <- model.data$y_cen
X_cen1 <- model.data$X_cen1
D1 <- model.data$D1
res2 <- gen_select2(y_cen, X_cen1, D1, btol = 1e-6)
beta_esti <- esti_beta(res2$beta[,res2$stop.index], ref)
plot_beta_bic(beta_true, beta_esti, res2$bic_n)
# plot_beta_bic(beta_true, esti_beta(res2$beta[,160], ref), res2$bic_n)
fuse_ass <- assess_fuse(phy, beta_esti, beta_true)
sparse_ass <- assess_sparse(beta_esti, beta_true)
temp[,ii] <- c(fuse_ass$nFPR, fuse_ass$nFNR, sparse_ass$FPR, sparse_ass$FNR, res2$bic_n[res2$stop.index])
print(paste0("Stop.index = ", res2$stop.index))
print(paste0("BIC = ", res2$bic_n[res2$stop.index]))
print(paste0('i=',i,'; type=',j,'; ii=',ii,' done!'))
}
STOR[[i]][[j]] <- temp
}
}
source('../MyFuns.R')
set.seed(1012)
p <- 50
phy <- rtree(p)
phy$tip.label <- 1:p
CLS <- c(56,75)
asso_tips <- plot_tree(phy, cls = CLS)
ln_par <- ln_param(phy)
gma <- gen_gma(ln_par = ln_par, p1 = 0.02, p2 = 0.05, tree = phy, cls = CLS)
beta_true <- true_beta(phy, CLS, gma)
ref <- 1
alp.values <- seq(0, 1, by = 0.05)
NN <- 5
STOR <- list()
pp <- length(alp.values)
mtd <- c('myown','wang1')
for (i in 1:NN){
temp <- matrix(nrow = 5, ncol = pp)
Data <- gen_dat(n = 300, ln_par = ln_par, gma = gma, tree = phy, cls = CLS, sig = 1)
STOR[[i]] <- list()
for (j in 1:2){
DW <- gen_D(phy, m = 2, weight = 'max', type = mtd[j])
for (ii in 1:pp) {
model.data <- data_prep(Data, DW, ref, alp = alp.values[ii], normlz = F)
G_cen <- model.data$G_cen
y_cen <- model.data$y_cen
X_cen1 <- model.data$X_cen1
D1 <- model.data$D1
res2 <- gen_select2(y_cen, X_cen1, D1, btol = 1e-6)
beta_esti <- esti_beta(res2$beta[,res2$stop.index], ref)
plot_beta_bic(beta_true, beta_esti, res2$bic_n)
# plot_beta_bic(beta_true, esti_beta(res2$beta[,160], ref), res2$bic_n)
fuse_ass <- assess_fuse(phy, beta_esti, beta_true)
sparse_ass <- assess_sparse(beta_esti, beta_true)
temp[,ii] <- c(fuse_ass$nFPR, fuse_ass$nFNR, sparse_ass$FPR, sparse_ass$FNR, res2$bic_n[res2$stop.index])
print(paste0("Stop.index = ", res2$stop.index))
print(paste0("BIC = ", res2$bic_n[res2$stop.index]))
print(paste0('i=',i,'; type=',j,'; ii=',ii,' done!'))
}
STOR[[i]][[j]] <- temp
}
}
rm(list = ls())
load('/Users/gzchen/Desktop/Chicago\ STAT/Master\'s\ Paper/R/i=200.RData')
?lapply
my.res <- lapply(STOR, FUN = function(x) {
idx <- which.min(x[[1]][5,])
return(x[[1]][,idx])
})
my.res[[1]]
my.res[[2]]
my.res[[3]]
my.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[1]][5,])
return(x[[1]][,idx])
})
my.res
wang.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[2]][5,])
return(x[[2]][,idx])
})
wang.res
lasso.res <- sapply(STOR, FUN = function(x) {
x[[2]][,1]
})
count1 <- sum(my.res[1,] == 0)
count2 <- sum(my.res[3,] == 0)
count3 <- sum((my.res[1,] == 0) & (my.res[3,] == 0))
count1
count2
count3
count1 <- sum(my.res[1,] == 0)
count2 <- sum(my.res[3,] == 0)
count3 <- sum((my.res[1,] == 0) & (my.res[3,] == 0))
count1 <- sum(wang.res[1,] == 0)
count2 <- sum(wang.res[3,] == 0)
count3 <- sum((wang.res[1,] == 0) & (wang.res[3,] == 0))
count1
count2
count3
count1 <- sum(lasso.res[1,] == 0)
count2 <- sum(lasso.res[3,] == 0)
count3 <- sum((lasso.res[1,] == 0) & (lasso.res[3,] == 0))
count1
count2
count3
?apply
ave.res <- apply(my.res, 1, mean)
ave.res
ave.res3 <- apply(lasso.res, 1, mean)
ave.res3
ave.res2 <- apply(wang.res, 1, mean)
ave.res2
my.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[1]][5,])
return(x[[1]][,idx])
})
ave.res1 <- apply(my.res, 1, mean)
count1 <- sum(my.res[1,] == 0)
count2 <- sum(my.res[3,] == 0)
count3 <- sum((my.res[1,] == 0) & (my.res[3,] == 0))
row1 <- c(ave.res1, count1, count2, count3)
wang.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[2]][5,])
return(x[[2]][,idx])
})
ave.res2 <- apply(wang.res, 1, mean)
count1 <- sum(wang.res[1,] == 0)
count2 <- sum(wang.res[3,] == 0)
count3 <- sum((wang.res[1,] == 0) & (wang.res[3,] == 0))
row2 <- c(ave.res2, count1, count2, count3)
lasso.res <- sapply(STOR, FUN = function(x) {
x[[2]][,1]
})
ave.res3 <- apply(lasso.res, 1, mean)
count1 <- sum(lasso.res[1,] == 0)
count2 <- sum(lasso.res[3,] == 0)
count3 <- sum((lasso.res[1,] == 0) & (lasso.res[3,] == 0))
row3 <- c(ave.res3, count1, count2, count3)
rbind(row1,row2, row3)
require(xtable)
xtable(rbind(row1,row2, row3))
rm(list = ls)
rm(list = ls())
load('/Users/gzchen/Desktop/Chicago\ STAT/Master\'s\ Paper/R/parselect.RData')
STOR[[2]]
STOR1[[2]]
STOR1[[1]]
?unlist()
unlist(STOR1)
STOR1[[1]]
STOR1[[2]]
length(STOR1)
length(STOR1[[1]])
length(STOR1[[2]])
require(foreach)
?foreach
length(STOR1[[1]][[5]])
length(unlist(STOR1))/(42*5)
STOR1[[1]][[1]]
STOR1[[1]][[2]]
STOR1[[2]]
STOR1[[1]][[3]]
list1 <- STOR[[1]][[1]]
list1 <- STOR1[[1]][[1]]
list1
list1[[1]][[99]]
list1[[1]][[98]]
list1[[1]][[2]]
list1[[1]][[3]]
list1[[1]]
list1[[100]]
STOR1[[1]][[2]]
STOR1[[1]][[3]]
STOR1[[1]][[99]]
STOR1[[1]][[100]]
list1 <- STOR1[[1]][[1]]
for (i in 2:100){
list1[[99+i]] <- STOR1[[1]][[i]]
}
list1[[199]]
STOR1[[2]]
list1[[200]] <- STOR1[[2]]
STOR <- list1
rm(list = ls())
load('/Users/gzchen/Desktop/Chicago\ STAT/Master\'s\ Paper/R/parselect.RData')
list1 <- STOR1[[1]][[1]]
for (i in 2:100){
list1[[99+i]] <- STOR1[[1]][[i]]
}
list1[[200]] <- STOR1[[2]]
STOR <- list1
my.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[1]][5,])
return(x[[1]][,idx])
})
ave.res1 <- apply(my.res, 1, mean)
count1 <- sum(my.res[1,] == 0)
count2 <- sum(my.res[3,] == 0)
count3 <- sum((my.res[1,] == 0) & (my.res[3,] == 0))
row1 <- c(ave.res1, count1, count2, count3)
wang.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[2]][5,])
return(x[[2]][,idx])
})
ave.res2 <- apply(wang.res, 1, mean)
count1 <- sum(wang.res[1,] == 0)
count2 <- sum(wang.res[3,] == 0)
count3 <- sum((wang.res[1,] == 0) & (wang.res[3,] == 0))
row2 <- c(ave.res2, count1, count2, count3)
lasso.res <- sapply(STOR, FUN = function(x) {
x[[2]][,1]
})
ave.res3 <- apply(lasso.res, 1, mean)
count1 <- sum(lasso.res[1,] == 0)
count2 <- sum(lasso.res[3,] == 0)
count3 <- sum((lasso.res[1,] == 0) & (lasso.res[3,] == 0))
row3 <- c(ave.res3, count1, count2, count3)
xtable(rbind(row1,row2, row3))
rm(list = ls())
# load('/Users/gzchen/Desktop/Chicago\ STAT/Master\'s\ Paper/R/type1err.RData')
load('/Users/gzchen/Desktop/Chicago\ STAT/Master\'s\ Paper/R/i=200.RData')
my.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[1]][5,])
return(x[[1]][,idx])
})
ave.res1 <- apply(my.res, 1, mean)
count1 <- sum(my.res[1,] == 0)
count2 <- sum(my.res[3,] == 0)
count3 <- sum((my.res[1,] == 0) & (my.res[3,] == 0))
row1 <- c(ave.res1, count1, count2, count3)
wang.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[2]][5,])
return(x[[2]][,idx])
})
ave.res2 <- apply(wang.res, 1, mean)
count1 <- sum(wang.res[1,] == 0)
count2 <- sum(wang.res[3,] == 0)
count3 <- sum((wang.res[1,] == 0) & (wang.res[3,] == 0))
row2 <- c(ave.res2, count1, count2, count3)
lasso.res <- sapply(STOR, FUN = function(x) {
x[[2]][,21]
})
ave.res3 <- apply(lasso.res, 1, mean)
count1 <- sum(lasso.res[1,] == 0)
count2 <- sum(lasso.res[3,] == 0)
count3 <- sum((lasso.res[1,] == 0) & (lasso.res[3,] == 0))
row3 <- c(ave.res3, count1, count2, count3)
xtable(rbind(row1,row2, row3))
###############################################
rm(list = ls())
load('/Users/gzchen/Desktop/Chicago\ STAT/Master\'s\ Paper/R/parselect.RData')
list1 <- STOR1[[1]][[1]]
for (i in 2:100){
list1[[99+i]] <- STOR1[[1]][[i]]
}
list1[[200]] <- STOR1[[2]]
STOR <- list1
my.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[1]][5,])
return(x[[1]][,idx])
})
ave.res1 <- apply(my.res, 1, mean)
count1 <- sum(my.res[1,] == 0)
count2 <- sum(my.res[3,] == 0)
count3 <- sum((my.res[1,] == 0) & (my.res[3,] == 0))
row1 <- c(ave.res1, count1, count2, count3)
wang.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[2]][5,])
return(x[[2]][,idx])
})
ave.res2 <- apply(wang.res, 1, mean)
count1 <- sum(wang.res[1,] == 0)
count2 <- sum(wang.res[3,] == 0)
count3 <- sum((wang.res[1,] == 0) & (wang.res[3,] == 0))
row2 <- c(ave.res2, count1, count2, count3)
lasso.res <- sapply(STOR, FUN = function(x) {
x[[2]][,21]
})
ave.res3 <- apply(lasso.res, 1, mean)
count1 <- sum(lasso.res[1,] == 0)
count2 <- sum(lasso.res[3,] == 0)
count3 <- sum((lasso.res[1,] == 0) & (lasso.res[3,] == 0))
row3 <- c(ave.res3, count1, count2, count3)
xtable(rbind(row1,row2, row3))
rm(list = ls())
load('/Users/gzchen/Desktop/Chicago\ STAT/Master\'s\ Paper/R/parselect.RData')
load('/Users/gzchen/Desktop/Chicago\ STAT/Master\'s\ Paper/R/parselect2.RData')
list1 <- STOR1[[1]][[1]]
for (i in 2:100){
list1[[99+i]] <- STOR1[[1]][[i]]
}
list1[[200]] <- STOR1[[2]]
STOR <- list1
my.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[1]][5,])
return(x[[1]][,idx])
})
ave.res1 <- apply(my.res, 1, mean)
count1 <- sum(my.res[1,] == 0)
count2 <- sum(my.res[3,] == 0)
count3 <- sum((my.res[1,] == 0) & (my.res[3,] == 0))
row1 <- c(ave.res1, count1, count2, count3)
wang.res <- sapply(STOR, FUN = function(x) {
idx <- which.min(x[[2]][5,])
return(x[[2]][,idx])
})
ave.res2 <- apply(wang.res, 1, mean)
count1 <- sum(wang.res[1,] == 0)
count2 <- sum(wang.res[3,] == 0)
count3 <- sum((wang.res[1,] == 0) & (wang.res[3,] == 0))
row2 <- c(ave.res2, count1, count2, count3)
lasso.res <- sapply(STOR, FUN = function(x) {
x[[2]][,21]
})
ave.res3 <- apply(lasso.res, 1, mean)
count1 <- sum(lasso.res[1,] == 0)
count2 <- sum(lasso.res[3,] == 0)
count3 <- sum((lasso.res[1,] == 0) & (lasso.res[3,] == 0))
row3 <- c(ave.res3, count1, count2, count3)
xtable(rbind(row1,row2, row3))
xtable(rbind(row1,row2, row3),caption = 'h')
rm(list = ls())
load("~/Desktop/Chicago STAT/Master's Paper/R/type1err.RData")
rm(res)
save.image("~/Desktop/Chicago STAT/Master's Paper/R/type1err.Rdata")
rm(list = ls())
load("~/Desktop/Chicago STAT/Master's Paper/R/type1err.RData")
opar <- par(no.readonly = T)
par(mfrow = c(1,2))
?hist
hist(P_val.chi1,freq = T, breaks = 10)
hist(P_val.chi1,freq = T)
par(opar)
hist(P_val.chi1,freq = T)
hist(P_val.chi1)
plot(1:2)
plot(1:2)
